<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ipython on Dunder Doc</title>
    <link>http://stummjr.github.io/tags/ipython/</link>
    <description>Recent content in ipython on Dunder Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jun 2020 10:19:13 -0300</lastBuildDate>
    
      <atom:link href="http://stummjr.github.io/tags/ipython/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My Favorite IPython Tricks</title>
      <link>http://stummjr.github.io/post/ipython-tricks/</link>
      <pubDate>Sat, 06 Jun 2020 10:19:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/ipython-tricks/</guid>
      <description>&lt;p&gt;It’s no secret that &lt;a href=&#34;https://ipython.org/&#34;&gt;IPython&lt;/a&gt; is my favorite Python shell. I am the guy who is always asking everyone “did you try IPython already?” as soon as I see they opening the regular Python shell. Yes, I know, you’d probably hate me.&lt;/p&gt;
&lt;p&gt;The reason I like it so much is that IPython makes it very easy for me to incrementally experiment when coding. I consider experimentation to be a crucial step when writing software, as it helps to reduce the unkowns in a problem or technology.&lt;/p&gt;
&lt;p&gt;Whenever I feel that there are gaps between what I know and what I have to accomplish, I use IPython to run experiments. After a bit of fiddling, I usually have a better understanding about what I have to do and then I feel more confident to go ahead and design a solution.&lt;/p&gt;
&lt;p&gt;IPython provides me with the tools that I need for easier experimentation and I will share my favorite ones here.&lt;/p&gt;
&lt;h2 id=&#34;docstrings-and-source-code-at-your-fingertips&#34;&gt;Docstrings and source code at your fingertips&lt;/h2&gt;
&lt;p&gt;REPLs like IPython are the perfect environment for experimentation. One of the things that I need the most when trying stuff in IPython is to understand the functions/modules that I am willing to employ, and there&amp;rsquo;s nothing better than docstrings to help me with that.&lt;/p&gt;
&lt;p&gt;IPython brings a handy shortcut to view the docstrings from any object. All I have to do is to append &lt;code&gt;?&lt;/code&gt; to the object&amp;rsquo;s name and hit enter. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getenv&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;
Signature: os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getenv(key, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
Docstring:
Get an environment variable, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t exist.&lt;/span&gt;
The optional second argument can specify an alternate default&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
key, default &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the result are str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
File:      &lt;span style=&#34;color:#f92672&#34;&gt;~/.&lt;/span&gt;virtualenvs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
Type:      function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, sometimes I need to dig a bit further because the doctstrings are not clear enough or because I want to make sure that a corner-case is covered. Reading the source code is usually the best approach for that and IPython makes it pretty easy for pure-Python functions/classes/modules. It’s just a matter of appending &lt;code&gt;??&lt;/code&gt; and hitting enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getenv&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;??&lt;/span&gt;
Signature: os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getenv(key, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
Source:
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(key, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Get an environment variable, return None if it doesn&amp;#39;t exist.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The optional second argument can specify an alternate default.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    key, default and the result are str.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; environ&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(key, default)
File:      &lt;span style=&#34;color:#f92672&#34;&gt;~/.&lt;/span&gt;virtualenvs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;python3&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
Type:      function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;saved-results-for-faster-experiments&#34;&gt;Saved results for faster experiments&lt;/h2&gt;
&lt;p&gt;I find myself very often in a situation like this: I just executed a statement, saw the result and then I want to reuse that value in a follow-up statement. You&amp;rsquo;ve probably been there already too. The first instinct is to just re-execute that expression, now assigning a name to it so that you can reuse it in the next statement.&lt;/p&gt;
&lt;p&gt;The good news is that we don&amp;rsquo;t need to do that. IPython saves the results of the 3 latest statements in these 3 names: &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;__&lt;/code&gt; and &lt;code&gt;___&lt;/code&gt; (most to least recent).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; __ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ___
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;IPython also allows you to refer to the result of any statement previously executed in the current session via their numbers using the &lt;code&gt;_n&lt;/code&gt; syntax. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: _ &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: _19 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I actually customized my prompt to not show these numbers, so this is not useful for me. Also, a long session with large output objects may bloat your computer&amp;rsquo;s RAM. To avoid that, you can always disable caching by addding this to your IPython configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TerminalInteractiveShell&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cache_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This won&amp;rsquo;t disable the handy &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;__&lt;/code&gt; and &lt;code&gt;___&lt;/code&gt; shortcuts, though.&lt;/p&gt;
&lt;h2 id=&#34;magic-commands&#34;&gt;Magic commands&lt;/h2&gt;
&lt;p&gt;IPython supports a variety of builtin commands that are so handy that they’re called &lt;strong&gt;magic commands&lt;/strong&gt;. They all start with the &lt;code&gt;%&lt;/code&gt; prefix and serve the most varied purposes. I am not a magic commands power user, but there are a few that I see myself using every now and then.&lt;/p&gt;
&lt;h3 id=&#34;timeit-timing-your-python-code&#34;&gt;%timeit: timing your python code&lt;/h3&gt;
&lt;p&gt;One of the goals of experimentation is figuring out what’d be the best solution to a particular problem, and often deciding what’s best involves performance evaluation. The &lt;a href=&#34;https://docs.python.org/3.8/library/timeit.html&#34;&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; standard library module is great for that as it allows for measuring the time taken by a statement.&lt;/p&gt;
&lt;p&gt;With IPython it&amp;rsquo;s even easier, as you can use the &lt;code&gt;%timeit&lt;/code&gt; magic function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;timeit [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)]
&lt;span style=&#34;color:#ae81ff&#34;&gt;33.4&lt;/span&gt; µs &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;238&lt;/span&gt; ns per loop (mean &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;prun-profiling-your-python-code&#34;&gt;%prun: profiling your python code&lt;/h3&gt;
&lt;p&gt;When timing the execution of a given statement is not enough for the experiments, profiling it is the next step. IPython provides the &lt;code&gt;%prun&lt;/code&gt; magic command to allow for that. Check it out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;prun get_players_with_most_championships(players)
         &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; function calls &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; {built&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; method builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exec}
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; ipython_edit_s94fadw6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;(players_with_most_rings)
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; {built&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; method builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max}
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
        &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; {method &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append&amp;#39;&lt;/span&gt; of &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt; objects}
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; {method &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt; of &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dict&amp;#39;&lt;/span&gt; objects}
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; {method &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;disable&amp;#39;&lt;/span&gt; of &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_lsprof.Profiler&amp;#39;&lt;/span&gt; objects}
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000&lt;/span&gt; ipython_edit_s94fadw6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;listcomp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is great, as it helps identifying possible bottlenecks in the statements that I am experimenting with.&lt;/p&gt;
&lt;h3 id=&#34;edit-editing-snippets-in-my-editor&#34;&gt;%edit: editing snippets in my editor&lt;/h3&gt;
&lt;p&gt;It’s a pain to write an entire function directly in the shell input. Fortunately, the &lt;code&gt;%edit&lt;/code&gt; magic function allows me to do that in my favorite editor. Once I close the editor, IPython will execute whatever I have typed in there.&lt;/p&gt;
&lt;p&gt;Check this out:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://stummjr.github.io/img/edit-ipython.gif&#34; width=&#34;650&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;And if I want to reopen the same snippet for editing, I can just execute &lt;code&gt;%edit -p&lt;/code&gt; and that very same code snippet will be back in my editor.&lt;/p&gt;
&lt;p&gt;This magic command is super handy when you want to input a big function and need a better place to write it in than the IPython shell itself.&lt;/p&gt;
&lt;h3 id=&#34;hist-listing-the-commands-history&#34;&gt;%hist: listing the commands history&lt;/h3&gt;
&lt;p&gt;When I am writing a function for an app and I am not really sure which operations are needed to transform the input from one format into another, I just open IPython and start experimenting. After a few experiments, I usually figure out what the function must implement. The next step is to copy the relevant lines to my editor and build the function from there.&lt;/p&gt;
&lt;p&gt;Copying them one by one is cumbersome and copying them all at once will include the shell preffix and the outputs, so I&amp;rsquo;d need to clean that up after pasting into my editor. In cases like this, I use the magic &lt;code&gt;%hist&lt;/code&gt; command:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://stummjr.github.io/img/hist-ipython.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;It ouputs only the expressions I typed in (no prefix and no outputs), so now I can just copy those into my editor, cut out the irrelevant parts of the experiments and finally polish the implementation.&lt;/p&gt;
&lt;p&gt;This commmand also allows to save the history directly into a file by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f myscript&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The command above will save all the statements from the input lines 5 to 25 into the &lt;code&gt;myscript.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Some people refer to this process as &lt;em&gt;REPL driven development&lt;/em&gt;. I find it particularly useful when I am writing a function to transform data from a known format to another.&lt;/p&gt;
&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;
&lt;p&gt;There are also a couple other commands that I find pretty helpful, but that I don&amp;rsquo;t use very often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%pycat file.py&lt;/code&gt;: to view a python file inside IPython with syntax-highlighting and pagination.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run file.py&lt;/code&gt;: to run a python file inside the current IPython session.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%quickref&lt;/code&gt;: to view a quick reference about magic commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running-system-commands-from-inside-the-shell&#34;&gt;Running system commands from inside the shell&lt;/h2&gt;
&lt;p&gt;It’s quite common to need to run an external command when you’re into an IPython session. Let’s say you want to quickly list the files from the current directory and you don’t want to leave your IPython session for that. All you have to do is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;ls
main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pyc output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What’s even cooler is that you can assign a name to the output of the system command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;ls
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; files
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main.pyc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main.py main.pyc output.txt&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main.py&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;main.pyc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;output.txt&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p
[PosixPath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main.py&amp;#39;&lt;/span&gt;), PosixPath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main.pyc&amp;#39;&lt;/span&gt;), PosixPath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course this is not valid Python code, so you can&amp;rsquo;t just use &lt;code&gt;!ls&lt;/code&gt; in your regular python scripts, but it can be pretty helpful during experiments.&lt;/p&gt;
&lt;h2 id=&#34;inspecting-code-with-ipython&#34;&gt;Inspecting code with IPython&lt;/h2&gt;
&lt;p&gt;Sometimes I need to stop the execution of my app at a certain point to inspect what’s going on. Even though debuggers serve this exact purpose very well, IPython also allows to drop the line below into any Python script and it will stop its execution for you to inspect the context and run experiments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; IPython &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; embed; embed()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Does this replace a full-fledged debugger? Not at all, but it can be pretty handy. If you want a debugger, check out &lt;a href=&#34;http://stummjr.github.io/post/debugging-python-with-pudb/&#34;&gt;this blog post that I wrote on pudb&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;IPython is super powerful and I am sure that there are tons of goodies that I am not even aware of, specially when it comes to notebooks and scientific computing.&lt;/p&gt;
&lt;p&gt;The tricks that I shared here are useful for me in my daily life as a software developer and I hope some of them can be helpful to you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.:&lt;/strong&gt; this post was heavily inspired by a talk given by my good friend &lt;a href=&#34;https://eliasdorneles.com/&#34;&gt;Elias Dorneles&lt;/a&gt; and I back in 2016.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to customize your IPython 5&#43; prompt</title>
      <link>http://stummjr.github.io/post/customize-ipython5-prompt/</link>
      <pubDate>Sun, 02 Sep 2018 15:55:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/customize-ipython5-prompt/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ipython.org/&#34;&gt;IPython&lt;/a&gt; is wonderful and I ❤️ it.&lt;/strong&gt; I can’t see myself using the default Python shell in a daily basis. However, its default prompt kind of annoys me:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://stummjr.github.io/img/posts/ipython1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some of the things that I dislike:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the banner displayed when we start it;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;In[x]&lt;/code&gt; and &lt;code&gt;Out[x]&lt;/code&gt; displayed for inputs and outputs;&lt;/li&gt;
&lt;li&gt;the newline in between commands;&lt;/li&gt;
&lt;li&gt;and last, but far from least, the uber-annoying &lt;em&gt;“do you really want to exit?”&lt;/em&gt; message.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, it doesn’t take much to get on my nerves. 😆&lt;/p&gt;
&lt;p&gt;The bright side is that it’s easy to change that and have a more pleasant experience with IPython. This is my ideal shell, more compact and less bureaucratic:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://stummjr.github.io/img/posts/ipython2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you like it, follow me through the next steps to make your IPython shell look and behave like that.&lt;/p&gt;
&lt;h1 id=&#34;customizing-the-prompt&#34;&gt;Customizing the prompt&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt; you have to create a default profile for your shell with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ipython profile create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a result, a &lt;code&gt;.ipython&lt;/code&gt; folder will be created in your home folder, with the following contents:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ipython
├── extensions
├── nbextensions
└── profile_default
    ├── ipython_config.py
    ├── log
    ├── pid
    ├── security
    └── startup
        └── README
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, create  &lt;code&gt;.ipython/custom_prompt.py&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; IPython.terminal.prompts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Prompts, Token
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomPrompt&lt;/span&gt;(Prompts):
 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in_prompt_tokens&lt;/span&gt;(self, cli&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [(Token&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Prompt, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;), ]
 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out_prompt_tokens&lt;/span&gt;(self, cli&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [(Token&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Prompt, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;), ]
 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;continuation_prompt_tokens&lt;/span&gt;(self, cli&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [(Token&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Prompt, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;), ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;And last&lt;/strong&gt;, you have to tell IPython to use this new class as your prompt and in addition to custom settings.&lt;/p&gt;
&lt;p&gt;You can do so by adding this code to &lt;code&gt;.ipython/profile_default/ipython_config.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; custom_prompt &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CustomPrompt
 
 
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_config()
 
c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TerminalInteractiveShell&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prompts_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CustomPrompt
c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TerminalInteractiveShell&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;separate_in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TerminalInteractiveShell&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;confirm_exit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TerminalIPythonApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;display_banner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;That’s it&lt;/strong&gt;, now you have a prompt like the one I’ve shown earlier. I hope it improves your experience with IPython as it did for me.&lt;/p&gt;
&lt;p&gt;If you want to learn how to do further customizations, check &lt;a href=&#34;https://ipython.readthedocs.io/en/stable/config/details.html#custom-prompts&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ah, did I mention that &lt;strong&gt;I love IPython&lt;/strong&gt;? Huge kudos and thanks for the team behind it! 👏&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
