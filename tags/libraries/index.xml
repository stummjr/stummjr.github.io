<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libraries on Dunder Doc</title>
    <link>http://stummjr.github.io/tags/libraries/</link>
    <description>Recent content in libraries on Dunder Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 23:19:13 -0300</lastBuildDate>
    
      <atom:link href="http://stummjr.github.io/tags/libraries/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tips for boosting your Python scripts</title>
      <link>http://stummjr.github.io/post/building-scripts-in-python/</link>
      <pubDate>Tue, 19 May 2020 23:19:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/building-scripts-in-python/</guid>
      <description>&lt;p&gt;I find myself writing quick command line scripts every so often. They usually automate a
random task from my daily routine and end up saving me a bunch of time. These scripts
usually start as quick and dirty snippets, but once I figure that they are not a one-off
thing, then I iterate to make them more usable.&lt;/p&gt;
&lt;p&gt;There are several things that I find valuable in scripts like these:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Their development cycle must be fast and iterative.&lt;/li&gt;
&lt;li&gt;They must support command line arguments.&lt;/li&gt;
&lt;li&gt;They must display progress bars during expensive operations.&lt;/li&gt;
&lt;li&gt;They must output the results in a human-digestable format.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am pretty sure I am not alone on this, so I am going to share some of the tools that I use
on my scripts to support the features above.&lt;/p&gt;
&lt;h2 id=&#34;caching-http-responses-during-development&#34;&gt;Caching HTTP responses during development&lt;/h2&gt;
&lt;p&gt;Building scripts that fetch data from the network can be a bit of a pain. Every time you
want to test changes to your code, you have to re-fetch the data. In addition to slowing
down the development cycle, you may very quickly hit API rate limits which will force you to
stop until you&amp;rsquo;re clean again.&lt;/p&gt;
&lt;p&gt;To avoid such issues, I&amp;rsquo;ve been using a library called
&lt;a href=&#34;https://github.com/reclosedev/requests-cache&#34;&gt;&lt;code&gt;requests-cache&lt;/code&gt;&lt;/a&gt; that is a great companion
to &lt;a href=&#34;https://github.com/psf/requests&#34;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt;. It basically creates a persistent cache so
that your script does not reach out to the server every time you run it. Using it is as simple
as importing it and installing a cache:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests_cache

requests_cache&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;install_cache(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;temp_cache&amp;#39;&lt;/span&gt;)
response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the script above is ran for the first time, &lt;code&gt;requests-cache&lt;/code&gt; will create a &lt;code&gt;temp_cache.sqlite&lt;/code&gt;
file and store the responses there. The next time the script is ran, no requests are going to hit
the server.&lt;/p&gt;
&lt;p&gt;In some cases, it may be useful to specify an expiration period. For example, we can force
a cache invalidation after 1 hour by passing the &lt;code&gt;expire_after&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;requests_cache&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;install_cache(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;temp_cache&amp;#39;&lt;/span&gt;, expire_after&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This library has boosted my development speed considerably. For more options, check out
the &lt;a href=&#34;https://requests-cache.readthedocs.io/en/latest/&#34;&gt;requests-cache documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;parsing-command-line-arguments&#34;&gt;Parsing Command Line Arguments&lt;/h2&gt;
&lt;p&gt;I was a long time &lt;code&gt;argparse&lt;/code&gt; user, until I met &lt;a href=&#34;https://click.palletsprojects.com/&#34;&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt;.
Click is so much simpler and yet very powerful. It allows me to define the arguments for my script
by simply decorating a function. Check out how simple it is to parse a couple command line options
with &lt;code&gt;click&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; click

&lt;span style=&#34;color:#a6e22e&#34;&gt;@click.command&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;@click.option&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--user&amp;#34;&lt;/span&gt;, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A GitHub username.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@click.option&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--days&amp;#34;&lt;/span&gt;, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The number of days to look back.&amp;#34;&lt;/span&gt;, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grab_stats&lt;/span&gt;(user, days):
    click&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;echo(click&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, {user}!&amp;#34;&lt;/span&gt;, fg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;))
    click&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;echo(click&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fetching the PRs/issues created in the past {days} days.&amp;#34;&lt;/span&gt;, fg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    grab_stats()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check out the output of the script above:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://stummjr.github.io/img/click-output.png&#34; width=&#34;800&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Click allowed me to easily format the output using &lt;code&gt;click.style()&lt;/code&gt;, which is a great abstraction
around the terminal&amp;rsquo;s escape sequences.&lt;/p&gt;
&lt;p&gt;Click&amp;rsquo;s &lt;code&gt;echo()&lt;/code&gt; function is also quite helpful as it gracefully handles multiple types of
terminals, so that the script&amp;rsquo;s output looks the same no matter the terminal encoding.&lt;/p&gt;
&lt;p&gt;Click also auto-generates help pages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python ghstats.py --help
Usage: ghstats.py [OPTIONS]

Options:
  --user TEXT     The user&#39;s GitHub username.
  --days INTEGER  List the PRs/issues opened in the last &#39;days&#39; days.
  --help          Show this message and exit.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the simplest example ever. Click is a very robust and feature-rich tool.
For more info, check out the &lt;a href=&#34;https://click.palletsprojects.com/&#34;&gt;click docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;showing-progress-bars-for-the-impatient&#34;&gt;Showing progress bars for the impatient&lt;/h2&gt;
&lt;p&gt;Every now and then I build a script that is just slow. Sometimes it&amp;rsquo;s because it&amp;rsquo;s reading
a ton of files, sometimes it&amp;rsquo;s doing a bunch of HTTP requests and sometimes it&amp;rsquo;s just CPU heavy.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing worse than staring at the screen as the cursor blinks without telling us
anything. Progress bars are excellent at giving the users a sense of (&lt;em&gt;uh &amp;hellip;&lt;/em&gt;) progress.
A simple progress bar like this helps users to estimate how much time they&amp;rsquo;ll have to wait:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://stummjr.github.io/img/progress-bar-tqdm.png&#34; width=&#34;800&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Adding progress bars to Python scripts is super easy with &lt;a href=&#34;https://github.com/tqdm/tqdm&#34;&gt;&lt;code&gt;tqdm&lt;/code&gt;&lt;/a&gt;.
Let&amp;rsquo;s say that we have a script that goes through a bunch of URLs making requests to fetch their
resources. This is all we have to do to show a nice progress bar to follow through the progress:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tqdm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tqdm

&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(urls):
    resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty simple, huh? It&amp;rsquo;s so simple that it&amp;rsquo;s hard to notice where the progress bar is being
introduced.&lt;/p&gt;
&lt;p&gt;Again, this is just the simplest thing we can do with &lt;code&gt;tqdm&lt;/code&gt;. It is super configurable and even provides
a command line tool so that you can add progress bars to your shell scripts. For more info, check out
the &lt;a href=&#34;https://github.com/tqdm/tqdm/blob/master/README.rst&#34;&gt;tqdm docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tabulating-the-output&#34;&gt;Tabulating the output&lt;/h2&gt;
&lt;p&gt;Isn&amp;rsquo;t it better when a script outputs a nice little table on the screen instead of a confusing
JSON object? The &lt;a href=&#34;https://github.com/astanin/python-tabulate&#34;&gt;&lt;code&gt;tabulate&lt;/code&gt;&lt;/a&gt; library is quite handy
as it allows us to easily plot nice ASCII tables with the output of our scripts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

repo_pulls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/stummjr/flake8-scrapy/pull/13&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drop usage of lambda as callback&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stummjr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-10-20&amp;#34;&lt;/span&gt;),
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/stummjr/flake8-scrapy/pull/12&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Forbid inline callbacks&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stummjr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-09-20&amp;#34;&lt;/span&gt;),
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/stummjr/flake8-scrapy/pull/11&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Document callbacks&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stummjr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-08-20&amp;#34;&lt;/span&gt;),
]
headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;URL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Author&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;)
table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tabulate(repo_pulls, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fancy_grid&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script above will output a nice little table like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;╒══════════════════════════════════════════════════╤══════════════════════════════════╤══════════╤════════════╕
│ URL                                              │ Title                            │ Author   │ When       │
╞══════════════════════════════════════════════════╪══════════════════════════════════╪══════════╪════════════╡
│ https://github.com/stummjr/flake8-scrapy/pull/13 │ Drop usage of lambda as callback │ stummjr  │ 2018-10-20 │
├──────────────────────────────────────────────────┼──────────────────────────────────┼──────────┼────────────┤
│ https://github.com/stummjr/flake8-scrapy/pull/12 │ Forbid inline callbacks          │ stummjr  │ 2018-09-20 │
├──────────────────────────────────────────────────┼──────────────────────────────────┼──────────┼────────────┤
│ https://github.com/stummjr/flake8-scrapy/pull/11 │ Document callbacks               │ stummjr  │ 2018-08-20 │
╘══════════════════════════════════════════════════╧══════════════════════════════════╧══════════╧════════════╛
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This makes your quick and dirty scripts look more professional and it makes their output way more digestable.
For more options, check out the &lt;a href=&#34;https://github.com/astanin/python-tabulate#python-tabulate&#34;&gt;tabulate documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I love writing scripts and I feel super proud when I am able to make one that&amp;rsquo;s useful &lt;strong&gt;and&lt;/strong&gt; usable.
I hope the tips I shared here can help you feel the same about your scripts.&lt;/p&gt;
&lt;p&gt;And if you know any other helpful tools, please share them here in the comments as I&amp;rsquo;m always looking for
ways to improve my own scripts.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
