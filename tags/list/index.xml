<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>list on Dunder Doc</title>
    <link>http://stummjr.github.io/tags/list/</link>
    <description>Recent content in list on Dunder Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Aug 2018 15:42:35 -0300</lastBuildDate>
    
      <atom:link href="http://stummjr.github.io/tags/list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Drop Duplicates from a List in Order</title>
      <link>http://stummjr.github.io/post/drop-duplicates-in-order/</link>
      <pubDate>Mon, 27 Aug 2018 15:42:35 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/drop-duplicates-in-order/</guid>
      <description>&lt;p&gt;Letâ€™s say you have a list containing all the URLs extracted from a web page and you want to get rid of duplicate URLs.&lt;/p&gt;
&lt;p&gt;The most common way of achieving that might be building a set from that list, given that such operation automatically drops the duplicates. Something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; urls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/b&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/a&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/c&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/b&amp;#39;&lt;/span&gt;
]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; set(urls)
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/a&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/b&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/c&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that we just lost the original order of the list.&lt;/p&gt;
&lt;p&gt;A good way to maintain the original order of the elements after removing the duplicates is by using this trick with &lt;a href=&#34;https://docs.python.org/3/library/collections.html#collections.OrderedDict&#34;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; OrderedDict
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list(OrderedDict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromkeys(urls)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/b&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/a&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/c&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cool, huh? Now letâ€™s dig into details to understand what the code above does.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OrderedDict&lt;/code&gt; is like a traditional Python &lt;code&gt;dict&lt;/code&gt; with a (not so) slight difference: &lt;code&gt;OrderedDict&lt;/code&gt; keeps the elementsâ€™ insertion order internally. This way, when we iterate over such an object, it will return its elements in the order in which theyâ€™ve been inserted.&lt;/p&gt;
&lt;p&gt;Now, letâ€™s break down the operations to understand whatâ€™s going on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; odict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OrderedDict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromkeys(urls)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/collections.html#collections.Counter.fromkeys&#34;&gt;&lt;code&gt;fromkeys()&lt;/code&gt;&lt;/a&gt; method creates a dictionary using the values passed as its first parameters as the keys and the second parameter as its values (or &lt;code&gt;None&lt;/code&gt; if we pass nothing, as we did).&lt;/p&gt;
&lt;p&gt;As a result we get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; odict
OrderedDict([(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;),
             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;),
             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have a dictionary with the URLs as the keys, we can call the &lt;code&gt;keys()&lt;/code&gt; method to get only a sequence containing the URLs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list(odict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/b&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/a&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.example.com/c&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Easy like that. ðŸ˜€&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
