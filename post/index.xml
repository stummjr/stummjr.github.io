<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dunder Doc</title>
    <link>http://stummjr.github.io/post/</link>
    <description>Recent content in Posts on Dunder Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2020 15:55:13 -0300</lastBuildDate>
    
	<atom:link href="http://stummjr.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Quick and Dirty Scripts Like a Pro</title>
      <link>http://stummjr.github.io/post/progress-bars-with-tqdm/</link>
      <pubDate>Thu, 07 May 2020 15:55:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/progress-bars-with-tqdm/</guid>
      <description>I have built countless scripts in my life to solve a myriad of problems. They usually start pretty ugly, but once I notice that I will be running them over and over again, I start adding some basic functionality to make my user experience a bit better.
 parsing command line arguments; showing a progress bar for expensive operations; formatting the output for better reading.  My ugly script Reading Command Line Arguments using click?</description>
    </item>
    
    <item>
      <title>Why I stopped using dark backgrounds</title>
      <link>http://stummjr.github.io/post/stop-using-dark-background/</link>
      <pubDate>Thu, 07 May 2020 15:55:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/stop-using-dark-background/</guid>
      <description>15 years ago, my whole desktop environment was dark. Dark terminal, dark vim, dark graphic environment, and dark mp3 player. It was pretty cool. I felt like a hacker in those unrealistic 90s movies. Whoever stepped into my room would think that I was doing some rocket science. In fact, I was probaby just listening to mp3, learning some bash scripting and taking screenshots to share my cool desktop in online forums.</description>
    </item>
    
    <item>
      <title>Writing Scrapy Spiders in 2020</title>
      <link>http://stummjr.github.io/post/scrapy-in-2020/</link>
      <pubDate>Sun, 03 May 2020 15:55:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/scrapy-in-2020/</guid>
      <description>I am a huge fan of Scrapy and I&amp;rsquo;ve used it extensively for 3+ wonderful years working at Scrapinghub, the company behind this framework.
It&amp;rsquo;s been one and a half year since I used it for the last time, but last week I had to build a spider for a personal project. To my surprise, I am not just rusty but pretty outdated in terms of the new shiny features of Scrapy.</description>
    </item>
    
    <item>
      <title>Debugging Python with pudb</title>
      <link>http://stummjr.github.io/post/debugging-python-with-pudb/</link>
      <pubDate>Fri, 01 May 2020 15:42:35 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/debugging-python-with-pudb/</guid>
      <description>Pudb is, in my opinion, the most underrated Python package out there. I know this is a bold statement, but that’s how I feel about it. It helped me so much in a daily basis for so many years and I still feel like not too many people know about it.
Debugging in Python There are several good debuggers for Python. I know a ton of people that use pdb, ipdb, VSCode/PyCharm embedded debuggers, among others.</description>
    </item>
    
    <item>
      <title>Building a custom Flake8 plugin</title>
      <link>http://stummjr.github.io/post/building-a-custom-flake8-plugin/</link>
      <pubDate>Mon, 31 Dec 2018 15:42:35 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/building-a-custom-flake8-plugin/</guid>
      <description>Linters are everywhere. Be it in a fancy IDE, a CI pipeline or in the command line, linters help us to spot potential issues in our codebases. My favorite linter is flake8 and I use it in my VSCode setup, in my git pre-commit hooks and CI pipelines.
But the thing is that flake8 doesn’t catch all the stuff I wanted it to catch. For example, I’d like my linter to catch the usage of the map and filter functions.</description>
    </item>
    
    <item>
      <title>The curious case of the else in Python loops</title>
      <link>http://stummjr.github.io/post/else-in-python-loops/</link>
      <pubDate>Wed, 05 Sep 2018 15:42:35 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/else-in-python-loops/</guid>
      <description>One of the first things to stand out when I was starting with Python was the else clause. I guess everyone knows the normal usage of such clauses in any programming language, which is to define an alternate path for the if condition. Oddly enough, in Python we can add else clauses in loop constructions, such as for and while.
For example, this is valid Python:
for number in some_sequence: if is_the_magic_number(number): print(&amp;#39;found the magic number&amp;#39;) break else: print(&amp;#39;magic number not found&amp;#39;) Notice how the else is aligned with the for and not with the if.</description>
    </item>
    
    <item>
      <title>How to customize your IPython 5&#43; prompt</title>
      <link>http://stummjr.github.io/post/customize-ipython5-prompt/</link>
      <pubDate>Sun, 02 Sep 2018 15:55:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/customize-ipython5-prompt/</guid>
      <description>IPython is wonderful and I ❤️ it. I can’t see myself using the default Python shell in a daily basis. However, its default prompt kind of annoys me:
Some of the things that I dislike:
 the banner displayed when we start it; the In[x] and Out[x] displayed for inputs and outputs; the newline in between commands; and last, but far from least, the uber-annoying “do you really want to exit?</description>
    </item>
    
    <item>
      <title>Python 3 rounding oddities</title>
      <link>http://stummjr.github.io/post/python3-round-oddities/</link>
      <pubDate>Tue, 28 Aug 2018 15:55:13 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/python3-round-oddities/</guid>
      <description>Rounding a decimal number with Python 3 is as simple as invoking the round() builtin:
&amp;gt;&amp;gt;&amp;gt; round(1.2) 1 &amp;gt;&amp;gt;&amp;gt; round(1.8) 2 We can also pass an extra parameter called ndigits, which defines the precision we want in the result. Such parameter defaults to 0, but we can pass anything:
&amp;gt;&amp;gt;&amp;gt; round(1.847, ndigits=2) 1.85 &amp;gt;&amp;gt;&amp;gt; round(1.847, ndigits=1) 1.8 And what happens when we want to round a number like 1.5? Will it round it up or down?</description>
    </item>
    
    <item>
      <title>Drop Duplicates from a List in Order</title>
      <link>http://stummjr.github.io/post/drop-duplicates-in-order/</link>
      <pubDate>Mon, 27 Aug 2018 15:42:35 -0300</pubDate>
      
      <guid>http://stummjr.github.io/post/drop-duplicates-in-order/</guid>
      <description>Let’s say you have a list containing all the URLs extracted from a web page and you want to get rid of duplicate URLs.
The most common way of achieving that might be building a set from that list, given that such operation automatically drops the duplicates. Something like:
&amp;gt;&amp;gt;&amp;gt; urls = [ &amp;#39;http://api.example.com/b&amp;#39;, &amp;#39;http://api.example.com/a&amp;#39;, &amp;#39;http://api.example.com/c&amp;#39;, &amp;#39;http://api.example.com/b&amp;#39; ] &amp;gt;&amp;gt;&amp;gt; set(urls) {&amp;#39;http://api.example.com/a&amp;#39;, &amp;#39;http://api.example.com/b&amp;#39;, &amp;#39;http://api.example.com/c&amp;#39;} The problem is that we just lost the original order of the list.</description>
    </item>
    
  </channel>
</rss>